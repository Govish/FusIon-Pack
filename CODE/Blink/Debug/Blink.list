
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000d4c  08000d4c  00010d4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000d7c  08000d7c  00010d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000d80  08000d80  00010d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000d88  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  08000d88  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006bec  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001309  00000000  00000000  00026c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d1c  00000000  00000000  00027f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000002d0  00000000  00000000  00028c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003e0  00000000  00000000  00028f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001d36  00000000  00000000  000292f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000011f2  00000000  00000000  0002b026  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002c218  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000600  00000000  00000000  0002c294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000d34 	.word	0x08000d34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000d34 	.word	0x08000d34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000224:	f000 fc64 	bl	8000af0 <HAL_RCC_GetHCLKFreq>
 8000228:	21fa      	movs	r1, #250	; 0xfa
 800022a:	0089      	lsls	r1, r1, #2
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 f866 	bl	8000300 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000234:	2001      	movs	r0, #1
 8000236:	2200      	movs	r2, #0
 8000238:	0021      	movs	r1, r4
 800023a:	4240      	negs	r0, r0
 800023c:	f000 f830 	bl	80002a0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000240:	2000      	movs	r0, #0
 8000242:	bd10      	pop	{r4, pc}

08000244 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	2310      	movs	r3, #16
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_Init+0x1c>)
{
 8000248:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800024c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024e:	430b      	orrs	r3, r1
 8000250:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000252:	f7ff ffe5 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 8000256:	f000 fcbd 	bl	8000bd4 <HAL_MspInit>
}
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40022000 	.word	0x40022000

08000264 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <HAL_IncTick+0xc>)
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	20000020 	.word	0x20000020

08000274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_GetTick+0x8>)
 8000276:	6818      	ldr	r0, [r3, #0]
}
 8000278:	4770      	bx	lr
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	20000020 	.word	0x20000020

08000280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000282:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000284:	f7ff fff6 	bl	8000274 <HAL_GetTick>
  uint32_t wait = Delay;
 8000288:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800028a:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800028c:	1c63      	adds	r3, r4, #1
 800028e:	1e5a      	subs	r2, r3, #1
 8000290:	4193      	sbcs	r3, r2
 8000292:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000294:	f7ff ffee 	bl	8000274 <HAL_GetTick>
 8000298:	1b40      	subs	r0, r0, r5
 800029a:	42a0      	cmp	r0, r4
 800029c:	d3fa      	bcc.n	8000294 <HAL_Delay+0x14>
  {
  }
}
 800029e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002a4:	2800      	cmp	r0, #0
 80002a6:	da14      	bge.n	80002d2 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a8:	230f      	movs	r3, #15
 80002aa:	b2c0      	uxtb	r0, r0
 80002ac:	4003      	ands	r3, r0
 80002ae:	3b08      	subs	r3, #8
 80002b0:	4a11      	ldr	r2, [pc, #68]	; (80002f8 <HAL_NVIC_SetPriority+0x58>)
 80002b2:	089b      	lsrs	r3, r3, #2
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	189b      	adds	r3, r3, r2
 80002b8:	2203      	movs	r2, #3
 80002ba:	4010      	ands	r0, r2
 80002bc:	4090      	lsls	r0, r2
 80002be:	32fc      	adds	r2, #252	; 0xfc
 80002c0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c8:	69dc      	ldr	r4, [r3, #28]
 80002ca:	43ac      	bics	r4, r5
 80002cc:	4321      	orrs	r1, r4
 80002ce:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002d0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d2:	2503      	movs	r5, #3
 80002d4:	0883      	lsrs	r3, r0, #2
 80002d6:	4028      	ands	r0, r5
 80002d8:	40a8      	lsls	r0, r5
 80002da:	35fc      	adds	r5, #252	; 0xfc
 80002dc:	002e      	movs	r6, r5
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <HAL_NVIC_SetPriority+0x5c>)
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	189b      	adds	r3, r3, r2
 80002e4:	22c0      	movs	r2, #192	; 0xc0
 80002e6:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002e8:	4029      	ands	r1, r5
 80002ea:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	589c      	ldr	r4, [r3, r2]
 80002f0:	43b4      	bics	r4, r6
 80002f2:	4321      	orrs	r1, r4
 80002f4:	5099      	str	r1, [r3, r2]
 80002f6:	e7eb      	b.n	80002d0 <HAL_NVIC_SetPriority+0x30>
 80002f8:	e000ed00 	.word	0xe000ed00
 80002fc:	e000e100 	.word	0xe000e100

08000300 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000300:	4a09      	ldr	r2, [pc, #36]	; (8000328 <HAL_SYSTICK_Config+0x28>)
 8000302:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000304:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000306:	4293      	cmp	r3, r2
 8000308:	d80d      	bhi.n	8000326 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800030c:	4a07      	ldr	r2, [pc, #28]	; (800032c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030e:	4808      	ldr	r0, [pc, #32]	; (8000330 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000310:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000312:	6a03      	ldr	r3, [r0, #32]
 8000314:	0609      	lsls	r1, r1, #24
 8000316:	021b      	lsls	r3, r3, #8
 8000318:	0a1b      	lsrs	r3, r3, #8
 800031a:	430b      	orrs	r3, r1
 800031c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800031e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000320:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000322:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000324:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000326:	4770      	bx	lr
 8000328:	00ffffff 	.word	0x00ffffff
 800032c:	e000e010 	.word	0xe000e010
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000334:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000336:	4a56      	ldr	r2, [pc, #344]	; (8000490 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000338:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800033a:	1882      	adds	r2, r0, r2
 800033c:	1e54      	subs	r4, r2, #1
 800033e:	41a2      	sbcs	r2, r4
{ 
 8000340:	b089      	sub	sp, #36	; 0x24
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000342:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 8000344:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000346:	3204      	adds	r2, #4
 8000348:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034a:	9a03      	ldr	r2, [sp, #12]
 800034c:	40da      	lsrs	r2, r3
 800034e:	d101      	bne.n	8000354 <HAL_GPIO_Init+0x20>
      }
    }
    
    position++;
  } 
}
 8000350:	b009      	add	sp, #36	; 0x24
 8000352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000354:	2201      	movs	r2, #1
 8000356:	409a      	lsls	r2, r3
 8000358:	4694      	mov	ip, r2
 800035a:	4664      	mov	r4, ip
 800035c:	9a03      	ldr	r2, [sp, #12]
 800035e:	4022      	ands	r2, r4
 8000360:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 8000362:	d100      	bne.n	8000366 <HAL_GPIO_Init+0x32>
 8000364:	e092      	b.n	800048c <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000366:	684a      	ldr	r2, [r1, #4]
 8000368:	9201      	str	r2, [sp, #4]
 800036a:	2210      	movs	r2, #16
 800036c:	9e01      	ldr	r6, [sp, #4]
 800036e:	4396      	bics	r6, r2
 8000370:	2e02      	cmp	r6, #2
 8000372:	d10d      	bne.n	8000390 <HAL_GPIO_Init+0x5c>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000374:	2407      	movs	r4, #7
 8000376:	270f      	movs	r7, #15
 8000378:	401c      	ands	r4, r3
 800037a:	00a4      	lsls	r4, r4, #2
 800037c:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3];
 800037e:	08da      	lsrs	r2, r3, #3
 8000380:	0092      	lsls	r2, r2, #2
 8000382:	1882      	adds	r2, r0, r2
 8000384:	6a15      	ldr	r5, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000386:	43bd      	bics	r5, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000388:	690f      	ldr	r7, [r1, #16]
 800038a:	40a7      	lsls	r7, r4
 800038c:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3U] = temp;
 800038e:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000390:	2203      	movs	r2, #3
 8000392:	0014      	movs	r4, r2
 8000394:	005d      	lsls	r5, r3, #1
 8000396:	40ac      	lsls	r4, r5
 8000398:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 800039a:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800039c:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800039e:	4027      	ands	r7, r4
 80003a0:	9704      	str	r7, [sp, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003a2:	9f01      	ldr	r7, [sp, #4]
 80003a4:	403a      	ands	r2, r7
 80003a6:	40aa      	lsls	r2, r5
 80003a8:	9f04      	ldr	r7, [sp, #16]
 80003aa:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80003ac:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ae:	2e01      	cmp	r6, #1
 80003b0:	d80e      	bhi.n	80003d0 <HAL_GPIO_Init+0x9c>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003b2:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR; 
 80003b4:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003b6:	40aa      	lsls	r2, r5
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003b8:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003ba:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 80003bc:	6082      	str	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003be:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 80003c0:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003c2:	4396      	bics	r6, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003c4:	9a01      	ldr	r2, [sp, #4]
 80003c6:	06d2      	lsls	r2, r2, #27
 80003c8:	0fd2      	lsrs	r2, r2, #31
 80003ca:	409a      	lsls	r2, r3
 80003cc:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80003ce:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80003d0:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003d2:	4014      	ands	r4, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003d4:	688a      	ldr	r2, [r1, #8]
 80003d6:	40aa      	lsls	r2, r5
 80003d8:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003da:	9a01      	ldr	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 80003dc:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003de:	00d2      	lsls	r2, r2, #3
 80003e0:	d554      	bpl.n	800048c <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e2:	2601      	movs	r6, #1
 80003e4:	4a2b      	ldr	r2, [pc, #172]	; (8000494 <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003e6:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e8:	6994      	ldr	r4, [r2, #24]
 80003ea:	4334      	orrs	r4, r6
 80003ec:	6194      	str	r4, [r2, #24]
 80003ee:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 80003f0:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4032      	ands	r2, r6
 80003f4:	9207      	str	r2, [sp, #28]
 80003f6:	9a07      	ldr	r2, [sp, #28]
 80003f8:	4a27      	ldr	r2, [pc, #156]	; (8000498 <HAL_GPIO_Init+0x164>)
 80003fa:	00a4      	lsls	r4, r4, #2
 80003fc:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2];
 80003fe:	68a2      	ldr	r2, [r4, #8]
 8000400:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000402:	2203      	movs	r2, #3
 8000404:	4015      	ands	r5, r2
 8000406:	00ad      	lsls	r5, r5, #2
 8000408:	320c      	adds	r2, #12
 800040a:	40aa      	lsls	r2, r5
 800040c:	4667      	mov	r7, ip
 800040e:	4397      	bics	r7, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000410:	2290      	movs	r2, #144	; 0x90
 8000412:	05d2      	lsls	r2, r2, #23
 8000414:	4694      	mov	ip, r2
 8000416:	2200      	movs	r2, #0
 8000418:	4560      	cmp	r0, ip
 800041a:	d00d      	beq.n	8000438 <HAL_GPIO_Init+0x104>
 800041c:	4a1f      	ldr	r2, [pc, #124]	; (800049c <HAL_GPIO_Init+0x168>)
 800041e:	4694      	mov	ip, r2
 8000420:	0032      	movs	r2, r6
 8000422:	4560      	cmp	r0, ip
 8000424:	d008      	beq.n	8000438 <HAL_GPIO_Init+0x104>
 8000426:	4e1e      	ldr	r6, [pc, #120]	; (80004a0 <HAL_GPIO_Init+0x16c>)
 8000428:	1892      	adds	r2, r2, r2
 800042a:	42b0      	cmp	r0, r6
 800042c:	d004      	beq.n	8000438 <HAL_GPIO_Init+0x104>
 800042e:	4e1d      	ldr	r6, [pc, #116]	; (80004a4 <HAL_GPIO_Init+0x170>)
 8000430:	3201      	adds	r2, #1
 8000432:	42b0      	cmp	r0, r6
 8000434:	d000      	beq.n	8000438 <HAL_GPIO_Init+0x104>
 8000436:	9a05      	ldr	r2, [sp, #20]
 8000438:	40aa      	lsls	r2, r5
 800043a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800043c:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800043e:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <HAL_GPIO_Init+0x174>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000440:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8000442:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 8000444:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000446:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000448:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 800044a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800044c:	03ff      	lsls	r7, r7, #15
 800044e:	d401      	bmi.n	8000454 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000450:	0035      	movs	r5, r6
 8000452:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000454:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000456:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8000458:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800045a:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 800045c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800045e:	03bf      	lsls	r7, r7, #14
 8000460:	d401      	bmi.n	8000466 <HAL_GPIO_Init+0x132>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000462:	0035      	movs	r5, r6
 8000464:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8000466:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000468:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 800046a:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800046c:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 800046e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000470:	02ff      	lsls	r7, r7, #11
 8000472:	d401      	bmi.n	8000478 <HAL_GPIO_Init+0x144>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000474:	0035      	movs	r5, r6
 8000476:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8000478:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800047a:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 800047c:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800047e:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000480:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000482:	02bf      	lsls	r7, r7, #10
 8000484:	d401      	bmi.n	800048a <HAL_GPIO_Init+0x156>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000486:	4025      	ands	r5, r4
 8000488:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800048a:	60d6      	str	r6, [r2, #12]
    position++;
 800048c:	3301      	adds	r3, #1
 800048e:	e75c      	b.n	800034a <HAL_GPIO_Init+0x16>
 8000490:	b7fff000 	.word	0xb7fff000
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000
 800049c:	48000400 	.word	0x48000400
 80004a0:	48000800 	.word	0x48000800
 80004a4:	48000c00 	.word	0x48000c00
 80004a8:	40010400 	.word	0x40010400

080004ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d001      	beq.n	80004b4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004b0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004b2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004b6:	e7fc      	b.n	80004b2 <HAL_GPIO_WritePin+0x6>

080004b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ba:	6803      	ldr	r3, [r0, #0]
{
 80004bc:	b085      	sub	sp, #20
 80004be:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c0:	07db      	lsls	r3, r3, #31
 80004c2:	d433      	bmi.n	800052c <HAL_RCC_OscConfig+0x74>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004c4:	682b      	ldr	r3, [r5, #0]
 80004c6:	079b      	lsls	r3, r3, #30
 80004c8:	d500      	bpl.n	80004cc <HAL_RCC_OscConfig+0x14>
 80004ca:	e08a      	b.n	80005e2 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004cc:	682b      	ldr	r3, [r5, #0]
 80004ce:	071b      	lsls	r3, r3, #28
 80004d0:	d500      	bpl.n	80004d4 <HAL_RCC_OscConfig+0x1c>
 80004d2:	e0ca      	b.n	800066a <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004d4:	682b      	ldr	r3, [r5, #0]
 80004d6:	075b      	lsls	r3, r3, #29
 80004d8:	d500      	bpl.n	80004dc <HAL_RCC_OscConfig+0x24>
 80004da:	e0ed      	b.n	80006b8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80004dc:	682b      	ldr	r3, [r5, #0]
 80004de:	06db      	lsls	r3, r3, #27
 80004e0:	d51a      	bpl.n	8000518 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80004e2:	696a      	ldr	r2, [r5, #20]
 80004e4:	4cbc      	ldr	r4, [pc, #752]	; (80007d8 <HAL_RCC_OscConfig+0x320>)
 80004e6:	2304      	movs	r3, #4
 80004e8:	2a01      	cmp	r2, #1
 80004ea:	d000      	beq.n	80004ee <HAL_RCC_OscConfig+0x36>
 80004ec:	e159      	b.n	80007a2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80004ee:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80004f0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80004f2:	430b      	orrs	r3, r1
 80004f4:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80004f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80004f8:	431a      	orrs	r2, r3
 80004fa:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80004fc:	f7ff feba 	bl	8000274 <HAL_GetTick>
 8000500:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000504:	4233      	tst	r3, r6
 8000506:	d100      	bne.n	800050a <HAL_RCC_OscConfig+0x52>
 8000508:	e144      	b.n	8000794 <HAL_RCC_OscConfig+0x2dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800050a:	21f8      	movs	r1, #248	; 0xf8
 800050c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800050e:	69ab      	ldr	r3, [r5, #24]
 8000510:	438a      	bics	r2, r1
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	4313      	orrs	r3, r2
 8000516:	6363      	str	r3, [r4, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000518:	682b      	ldr	r3, [r5, #0]
 800051a:	069b      	lsls	r3, r3, #26
 800051c:	d500      	bpl.n	8000520 <HAL_RCC_OscConfig+0x68>
 800051e:	e167      	b.n	80007f0 <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000520:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000522:	2900      	cmp	r1, #0
 8000524:	d000      	beq.n	8000528 <HAL_RCC_OscConfig+0x70>
 8000526:	e1a4      	b.n	8000872 <HAL_RCC_OscConfig+0x3ba>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000528:	2000      	movs	r0, #0
 800052a:	e018      	b.n	800055e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800052c:	210c      	movs	r1, #12
 800052e:	4caa      	ldr	r4, [pc, #680]	; (80007d8 <HAL_RCC_OscConfig+0x320>)
 8000530:	6862      	ldr	r2, [r4, #4]
 8000532:	400a      	ands	r2, r1
 8000534:	2a04      	cmp	r2, #4
 8000536:	d00b      	beq.n	8000550 <HAL_RCC_OscConfig+0x98>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000538:	6863      	ldr	r3, [r4, #4]
 800053a:	400b      	ands	r3, r1
 800053c:	2b08      	cmp	r3, #8
 800053e:	d110      	bne.n	8000562 <HAL_RCC_OscConfig+0xaa>
 8000540:	22c0      	movs	r2, #192	; 0xc0
 8000542:	6863      	ldr	r3, [r4, #4]
 8000544:	0252      	lsls	r2, r2, #9
 8000546:	4013      	ands	r3, r2
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	0252      	lsls	r2, r2, #9
 800054c:	4293      	cmp	r3, r2
 800054e:	d108      	bne.n	8000562 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000550:	6823      	ldr	r3, [r4, #0]
 8000552:	039b      	lsls	r3, r3, #14
 8000554:	d5b6      	bpl.n	80004c4 <HAL_RCC_OscConfig+0xc>
 8000556:	686b      	ldr	r3, [r5, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d1b3      	bne.n	80004c4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800055c:	2001      	movs	r0, #1
}
 800055e:	b005      	add	sp, #20
 8000560:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000562:	686b      	ldr	r3, [r5, #4]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d113      	bne.n	8000590 <HAL_RCC_OscConfig+0xd8>
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	6822      	ldr	r2, [r4, #0]
 800056c:	025b      	lsls	r3, r3, #9
 800056e:	4313      	orrs	r3, r2
 8000570:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000572:	f7ff fe7f 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000576:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000578:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800057a:	02b6      	lsls	r6, r6, #10
 800057c:	6823      	ldr	r3, [r4, #0]
 800057e:	4233      	tst	r3, r6
 8000580:	d1a0      	bne.n	80004c4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000582:	f7ff fe77 	bl	8000274 <HAL_GetTick>
 8000586:	1bc0      	subs	r0, r0, r7
 8000588:	2864      	cmp	r0, #100	; 0x64
 800058a:	d9f7      	bls.n	800057c <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 800058c:	2003      	movs	r0, #3
 800058e:	e7e6      	b.n	800055e <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000590:	2b00      	cmp	r3, #0
 8000592:	d116      	bne.n	80005c2 <HAL_RCC_OscConfig+0x10a>
 8000594:	6823      	ldr	r3, [r4, #0]
 8000596:	4a91      	ldr	r2, [pc, #580]	; (80007dc <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000598:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800059a:	4013      	ands	r3, r2
 800059c:	6023      	str	r3, [r4, #0]
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	4a8f      	ldr	r2, [pc, #572]	; (80007e0 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005a2:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005a4:	4013      	ands	r3, r2
 80005a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005a8:	f7ff fe64 	bl	8000274 <HAL_GetTick>
 80005ac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ae:	6823      	ldr	r3, [r4, #0]
 80005b0:	4233      	tst	r3, r6
 80005b2:	d100      	bne.n	80005b6 <HAL_RCC_OscConfig+0xfe>
 80005b4:	e786      	b.n	80004c4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005b6:	f7ff fe5d 	bl	8000274 <HAL_GetTick>
 80005ba:	1bc0      	subs	r0, r0, r7
 80005bc:	2864      	cmp	r0, #100	; 0x64
 80005be:	d9f6      	bls.n	80005ae <HAL_RCC_OscConfig+0xf6>
 80005c0:	e7e4      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c2:	2b05      	cmp	r3, #5
 80005c4:	d105      	bne.n	80005d2 <HAL_RCC_OscConfig+0x11a>
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	6822      	ldr	r2, [r4, #0]
 80005ca:	02db      	lsls	r3, r3, #11
 80005cc:	4313      	orrs	r3, r2
 80005ce:	6023      	str	r3, [r4, #0]
 80005d0:	e7ca      	b.n	8000568 <HAL_RCC_OscConfig+0xb0>
 80005d2:	6823      	ldr	r3, [r4, #0]
 80005d4:	4a81      	ldr	r2, [pc, #516]	; (80007dc <HAL_RCC_OscConfig+0x324>)
 80005d6:	4013      	ands	r3, r2
 80005d8:	6023      	str	r3, [r4, #0]
 80005da:	6823      	ldr	r3, [r4, #0]
 80005dc:	4a80      	ldr	r2, [pc, #512]	; (80007e0 <HAL_RCC_OscConfig+0x328>)
 80005de:	4013      	ands	r3, r2
 80005e0:	e7c6      	b.n	8000570 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005e2:	220c      	movs	r2, #12
 80005e4:	4c7c      	ldr	r4, [pc, #496]	; (80007d8 <HAL_RCC_OscConfig+0x320>)
 80005e6:	6863      	ldr	r3, [r4, #4]
 80005e8:	4213      	tst	r3, r2
 80005ea:	d00b      	beq.n	8000604 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005ec:	6863      	ldr	r3, [r4, #4]
 80005ee:	4013      	ands	r3, r2
 80005f0:	2b08      	cmp	r3, #8
 80005f2:	d115      	bne.n	8000620 <HAL_RCC_OscConfig+0x168>
 80005f4:	22c0      	movs	r2, #192	; 0xc0
 80005f6:	6863      	ldr	r3, [r4, #4]
 80005f8:	0252      	lsls	r2, r2, #9
 80005fa:	4013      	ands	r3, r2
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	0212      	lsls	r2, r2, #8
 8000600:	4293      	cmp	r3, r2
 8000602:	d10d      	bne.n	8000620 <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000604:	6823      	ldr	r3, [r4, #0]
 8000606:	079b      	lsls	r3, r3, #30
 8000608:	d502      	bpl.n	8000610 <HAL_RCC_OscConfig+0x158>
 800060a:	68eb      	ldr	r3, [r5, #12]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d1a5      	bne.n	800055c <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000610:	21f8      	movs	r1, #248	; 0xf8
 8000612:	6822      	ldr	r2, [r4, #0]
 8000614:	692b      	ldr	r3, [r5, #16]
 8000616:	438a      	bics	r2, r1
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4313      	orrs	r3, r2
 800061c:	6023      	str	r3, [r4, #0]
 800061e:	e755      	b.n	80004cc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000620:	68ea      	ldr	r2, [r5, #12]
 8000622:	2301      	movs	r3, #1
 8000624:	2a00      	cmp	r2, #0
 8000626:	d00f      	beq.n	8000648 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000628:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800062a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800062c:	4313      	orrs	r3, r2
 800062e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000630:	f7ff fe20 	bl	8000274 <HAL_GetTick>
 8000634:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000636:	6823      	ldr	r3, [r4, #0]
 8000638:	4233      	tst	r3, r6
 800063a:	d1e9      	bne.n	8000610 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800063c:	f7ff fe1a 	bl	8000274 <HAL_GetTick>
 8000640:	1bc0      	subs	r0, r0, r7
 8000642:	2802      	cmp	r0, #2
 8000644:	d9f7      	bls.n	8000636 <HAL_RCC_OscConfig+0x17e>
 8000646:	e7a1      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_DISABLE();
 8000648:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800064a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800064c:	439a      	bics	r2, r3
 800064e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000650:	f7ff fe10 	bl	8000274 <HAL_GetTick>
 8000654:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000656:	6823      	ldr	r3, [r4, #0]
 8000658:	4233      	tst	r3, r6
 800065a:	d100      	bne.n	800065e <HAL_RCC_OscConfig+0x1a6>
 800065c:	e736      	b.n	80004cc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800065e:	f7ff fe09 	bl	8000274 <HAL_GetTick>
 8000662:	1bc0      	subs	r0, r0, r7
 8000664:	2802      	cmp	r0, #2
 8000666:	d9f6      	bls.n	8000656 <HAL_RCC_OscConfig+0x19e>
 8000668:	e790      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800066a:	69ea      	ldr	r2, [r5, #28]
 800066c:	2301      	movs	r3, #1
 800066e:	4c5a      	ldr	r4, [pc, #360]	; (80007d8 <HAL_RCC_OscConfig+0x320>)
 8000670:	2a00      	cmp	r2, #0
 8000672:	d010      	beq.n	8000696 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_LSI_ENABLE();
 8000674:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000676:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000678:	4313      	orrs	r3, r2
 800067a:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800067c:	f7ff fdfa 	bl	8000274 <HAL_GetTick>
 8000680:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000684:	4233      	tst	r3, r6
 8000686:	d000      	beq.n	800068a <HAL_RCC_OscConfig+0x1d2>
 8000688:	e724      	b.n	80004d4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800068a:	f7ff fdf3 	bl	8000274 <HAL_GetTick>
 800068e:	1bc0      	subs	r0, r0, r7
 8000690:	2802      	cmp	r0, #2
 8000692:	d9f6      	bls.n	8000682 <HAL_RCC_OscConfig+0x1ca>
 8000694:	e77a      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_LSI_DISABLE();
 8000696:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000698:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800069a:	439a      	bics	r2, r3
 800069c:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800069e:	f7ff fde9 	bl	8000274 <HAL_GetTick>
 80006a2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006a6:	4233      	tst	r3, r6
 80006a8:	d100      	bne.n	80006ac <HAL_RCC_OscConfig+0x1f4>
 80006aa:	e713      	b.n	80004d4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006ac:	f7ff fde2 	bl	8000274 <HAL_GetTick>
 80006b0:	1bc0      	subs	r0, r0, r7
 80006b2:	2802      	cmp	r0, #2
 80006b4:	d9f6      	bls.n	80006a4 <HAL_RCC_OscConfig+0x1ec>
 80006b6:	e769      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006b8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80006ba:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006bc:	4c46      	ldr	r4, [pc, #280]	; (80007d8 <HAL_RCC_OscConfig+0x320>)
 80006be:	0552      	lsls	r2, r2, #21
 80006c0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80006c2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006c4:	4213      	tst	r3, r2
 80006c6:	d108      	bne.n	80006da <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	69e3      	ldr	r3, [r4, #28]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	61e3      	str	r3, [r4, #28]
 80006ce:	69e3      	ldr	r3, [r4, #28]
 80006d0:	4013      	ands	r3, r2
 80006d2:	9303      	str	r3, [sp, #12]
 80006d4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80006d6:	2301      	movs	r3, #1
 80006d8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006da:	2780      	movs	r7, #128	; 0x80
 80006dc:	4e41      	ldr	r6, [pc, #260]	; (80007e4 <HAL_RCC_OscConfig+0x32c>)
 80006de:	007f      	lsls	r7, r7, #1
 80006e0:	6833      	ldr	r3, [r6, #0]
 80006e2:	423b      	tst	r3, r7
 80006e4:	d006      	beq.n	80006f4 <HAL_RCC_OscConfig+0x23c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e6:	68ab      	ldr	r3, [r5, #8]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d113      	bne.n	8000714 <HAL_RCC_OscConfig+0x25c>
 80006ec:	6a22      	ldr	r2, [r4, #32]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	6223      	str	r3, [r4, #32]
 80006f2:	e030      	b.n	8000756 <HAL_RCC_OscConfig+0x29e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006f4:	6833      	ldr	r3, [r6, #0]
 80006f6:	433b      	orrs	r3, r7
 80006f8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006fa:	f7ff fdbb 	bl	8000274 <HAL_GetTick>
 80006fe:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000700:	6833      	ldr	r3, [r6, #0]
 8000702:	423b      	tst	r3, r7
 8000704:	d1ef      	bne.n	80006e6 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000706:	f7ff fdb5 	bl	8000274 <HAL_GetTick>
 800070a:	9b01      	ldr	r3, [sp, #4]
 800070c:	1ac0      	subs	r0, r0, r3
 800070e:	2864      	cmp	r0, #100	; 0x64
 8000710:	d9f6      	bls.n	8000700 <HAL_RCC_OscConfig+0x248>
 8000712:	e73b      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
 8000714:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000716:	2b00      	cmp	r3, #0
 8000718:	d114      	bne.n	8000744 <HAL_RCC_OscConfig+0x28c>
 800071a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800071c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800071e:	4393      	bics	r3, r2
 8000720:	6223      	str	r3, [r4, #32]
 8000722:	6a23      	ldr	r3, [r4, #32]
 8000724:	3203      	adds	r2, #3
 8000726:	4393      	bics	r3, r2
 8000728:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800072a:	f7ff fda3 	bl	8000274 <HAL_GetTick>
 800072e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000730:	6a23      	ldr	r3, [r4, #32]
 8000732:	423b      	tst	r3, r7
 8000734:	d025      	beq.n	8000782 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000736:	f7ff fd9d 	bl	8000274 <HAL_GetTick>
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <HAL_RCC_OscConfig+0x330>)
 800073c:	1b80      	subs	r0, r0, r6
 800073e:	4298      	cmp	r0, r3
 8000740:	d9f6      	bls.n	8000730 <HAL_RCC_OscConfig+0x278>
 8000742:	e723      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000744:	2b05      	cmp	r3, #5
 8000746:	d10b      	bne.n	8000760 <HAL_RCC_OscConfig+0x2a8>
 8000748:	6a21      	ldr	r1, [r4, #32]
 800074a:	3b01      	subs	r3, #1
 800074c:	430b      	orrs	r3, r1
 800074e:	6223      	str	r3, [r4, #32]
 8000750:	6a23      	ldr	r3, [r4, #32]
 8000752:	431a      	orrs	r2, r3
 8000754:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000756:	f7ff fd8d 	bl	8000274 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800075a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800075c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800075e:	e00d      	b.n	800077c <HAL_RCC_OscConfig+0x2c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000760:	6a23      	ldr	r3, [r4, #32]
 8000762:	4393      	bics	r3, r2
 8000764:	2204      	movs	r2, #4
 8000766:	6223      	str	r3, [r4, #32]
 8000768:	6a23      	ldr	r3, [r4, #32]
 800076a:	4393      	bics	r3, r2
 800076c:	e7c0      	b.n	80006f0 <HAL_RCC_OscConfig+0x238>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800076e:	f7ff fd81 	bl	8000274 <HAL_GetTick>
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <HAL_RCC_OscConfig+0x330>)
 8000774:	1b80      	subs	r0, r0, r6
 8000776:	4298      	cmp	r0, r3
 8000778:	d900      	bls.n	800077c <HAL_RCC_OscConfig+0x2c4>
 800077a:	e707      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800077c:	6a23      	ldr	r3, [r4, #32]
 800077e:	423b      	tst	r3, r7
 8000780:	d0f5      	beq.n	800076e <HAL_RCC_OscConfig+0x2b6>
    if(pwrclkchanged == SET)
 8000782:	9b00      	ldr	r3, [sp, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d000      	beq.n	800078a <HAL_RCC_OscConfig+0x2d2>
 8000788:	e6a8      	b.n	80004dc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800078a:	69e3      	ldr	r3, [r4, #28]
 800078c:	4a17      	ldr	r2, [pc, #92]	; (80007ec <HAL_RCC_OscConfig+0x334>)
 800078e:	4013      	ands	r3, r2
 8000790:	61e3      	str	r3, [r4, #28]
 8000792:	e6a3      	b.n	80004dc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000794:	f7ff fd6e 	bl	8000274 <HAL_GetTick>
 8000798:	1bc0      	subs	r0, r0, r7
 800079a:	2802      	cmp	r0, #2
 800079c:	d800      	bhi.n	80007a0 <HAL_RCC_OscConfig+0x2e8>
 800079e:	e6b0      	b.n	8000502 <HAL_RCC_OscConfig+0x4a>
 80007a0:	e6f4      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80007a2:	3205      	adds	r2, #5
 80007a4:	d103      	bne.n	80007ae <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 80007a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80007a8:	439a      	bics	r2, r3
 80007aa:	6362      	str	r2, [r4, #52]	; 0x34
 80007ac:	e6ad      	b.n	800050a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80007ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007b0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80007b2:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80007b4:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80007b6:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80007b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007ba:	4393      	bics	r3, r2
 80007bc:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80007be:	f7ff fd59 	bl	8000274 <HAL_GetTick>
 80007c2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007c6:	4233      	tst	r3, r6
 80007c8:	d100      	bne.n	80007cc <HAL_RCC_OscConfig+0x314>
 80007ca:	e6a5      	b.n	8000518 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007cc:	f7ff fd52 	bl	8000274 <HAL_GetTick>
 80007d0:	1bc0      	subs	r0, r0, r7
 80007d2:	2802      	cmp	r0, #2
 80007d4:	d9f6      	bls.n	80007c4 <HAL_RCC_OscConfig+0x30c>
 80007d6:	e6d9      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
 80007d8:	40021000 	.word	0x40021000
 80007dc:	fffeffff 	.word	0xfffeffff
 80007e0:	fffbffff 	.word	0xfffbffff
 80007e4:	40007000 	.word	0x40007000
 80007e8:	00001388 	.word	0x00001388
 80007ec:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80007f0:	210c      	movs	r1, #12
 80007f2:	4c46      	ldr	r4, [pc, #280]	; (800090c <HAL_RCC_OscConfig+0x454>)
 80007f4:	6862      	ldr	r2, [r4, #4]
 80007f6:	400a      	ands	r2, r1
 80007f8:	428a      	cmp	r2, r1
 80007fa:	d009      	beq.n	8000810 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80007fc:	6863      	ldr	r3, [r4, #4]
 80007fe:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000800:	2b08      	cmp	r3, #8
 8000802:	d10e      	bne.n	8000822 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000804:	22c0      	movs	r2, #192	; 0xc0
 8000806:	6863      	ldr	r3, [r4, #4]
 8000808:	0252      	lsls	r2, r2, #9
 800080a:	4013      	ands	r3, r2
 800080c:	4293      	cmp	r3, r2
 800080e:	d108      	bne.n	8000822 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000810:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000812:	03db      	lsls	r3, r3, #15
 8000814:	d400      	bmi.n	8000818 <HAL_RCC_OscConfig+0x360>
 8000816:	e683      	b.n	8000520 <HAL_RCC_OscConfig+0x68>
 8000818:	6a2b      	ldr	r3, [r5, #32]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d000      	beq.n	8000820 <HAL_RCC_OscConfig+0x368>
 800081e:	e69d      	b.n	800055c <HAL_RCC_OscConfig+0xa4>
 8000820:	e67e      	b.n	8000520 <HAL_RCC_OscConfig+0x68>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000822:	6a2b      	ldr	r3, [r5, #32]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d011      	beq.n	800084c <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_HSI48_ENABLE();
 8000828:	2680      	movs	r6, #128	; 0x80
 800082a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800082c:	0276      	lsls	r6, r6, #9
 800082e:	4333      	orrs	r3, r6
 8000830:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000832:	f7ff fd1f 	bl	8000274 <HAL_GetTick>
 8000836:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800083a:	4233      	tst	r3, r6
 800083c:	d000      	beq.n	8000840 <HAL_RCC_OscConfig+0x388>
 800083e:	e66f      	b.n	8000520 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000840:	f7ff fd18 	bl	8000274 <HAL_GetTick>
 8000844:	1bc0      	subs	r0, r0, r7
 8000846:	2802      	cmp	r0, #2
 8000848:	d9f6      	bls.n	8000838 <HAL_RCC_OscConfig+0x380>
 800084a:	e69f      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI48_DISABLE();
 800084c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800084e:	4a30      	ldr	r2, [pc, #192]	; (8000910 <HAL_RCC_OscConfig+0x458>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000850:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8000852:	4013      	ands	r3, r2
 8000854:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000856:	f7ff fd0d 	bl	8000274 <HAL_GetTick>
 800085a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800085c:	0276      	lsls	r6, r6, #9
 800085e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000860:	4233      	tst	r3, r6
 8000862:	d100      	bne.n	8000866 <HAL_RCC_OscConfig+0x3ae>
 8000864:	e65c      	b.n	8000520 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000866:	f7ff fd05 	bl	8000274 <HAL_GetTick>
 800086a:	1bc0      	subs	r0, r0, r7
 800086c:	2802      	cmp	r0, #2
 800086e:	d9f6      	bls.n	800085e <HAL_RCC_OscConfig+0x3a6>
 8000870:	e68c      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000872:	220c      	movs	r2, #12
 8000874:	4c25      	ldr	r4, [pc, #148]	; (800090c <HAL_RCC_OscConfig+0x454>)
 8000876:	6863      	ldr	r3, [r4, #4]
 8000878:	4013      	ands	r3, r2
 800087a:	2b08      	cmp	r3, #8
 800087c:	d100      	bne.n	8000880 <HAL_RCC_OscConfig+0x3c8>
 800087e:	e66d      	b.n	800055c <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_PLL_DISABLE();
 8000880:	6823      	ldr	r3, [r4, #0]
 8000882:	4a24      	ldr	r2, [pc, #144]	; (8000914 <HAL_RCC_OscConfig+0x45c>)
 8000884:	4013      	ands	r3, r2
 8000886:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000888:	2902      	cmp	r1, #2
 800088a:	d12f      	bne.n	80008ec <HAL_RCC_OscConfig+0x434>
        tickstart = HAL_GetTick();
 800088c:	f7ff fcf2 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000890:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000892:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000894:	04b6      	lsls	r6, r6, #18
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	4233      	tst	r3, r6
 800089a:	d121      	bne.n	80008e0 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800089c:	220f      	movs	r2, #15
 800089e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008a0:	4393      	bics	r3, r2
 80008a2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80008a4:	4313      	orrs	r3, r2
 80008a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008a8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80008aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80008ac:	6862      	ldr	r2, [r4, #4]
 80008ae:	430b      	orrs	r3, r1
 80008b0:	4919      	ldr	r1, [pc, #100]	; (8000918 <HAL_RCC_OscConfig+0x460>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008b2:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008b4:	400a      	ands	r2, r1
 80008b6:	4313      	orrs	r3, r2
 80008b8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	6822      	ldr	r2, [r4, #0]
 80008be:	045b      	lsls	r3, r3, #17
 80008c0:	4313      	orrs	r3, r2
 80008c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008c4:	f7ff fcd6 	bl	8000274 <HAL_GetTick>
 80008c8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008ca:	04ad      	lsls	r5, r5, #18
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	422b      	tst	r3, r5
 80008d0:	d000      	beq.n	80008d4 <HAL_RCC_OscConfig+0x41c>
 80008d2:	e629      	b.n	8000528 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008d4:	f7ff fcce 	bl	8000274 <HAL_GetTick>
 80008d8:	1b80      	subs	r0, r0, r6
 80008da:	2802      	cmp	r0, #2
 80008dc:	d9f6      	bls.n	80008cc <HAL_RCC_OscConfig+0x414>
 80008de:	e655      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008e0:	f7ff fcc8 	bl	8000274 <HAL_GetTick>
 80008e4:	1bc0      	subs	r0, r0, r7
 80008e6:	2802      	cmp	r0, #2
 80008e8:	d9d5      	bls.n	8000896 <HAL_RCC_OscConfig+0x3de>
 80008ea:	e64f      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 80008ec:	f7ff fcc2 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008f0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80008f2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008f4:	04ad      	lsls	r5, r5, #18
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	422b      	tst	r3, r5
 80008fa:	d100      	bne.n	80008fe <HAL_RCC_OscConfig+0x446>
 80008fc:	e614      	b.n	8000528 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008fe:	f7ff fcb9 	bl	8000274 <HAL_GetTick>
 8000902:	1b80      	subs	r0, r0, r6
 8000904:	2802      	cmp	r0, #2
 8000906:	d9f6      	bls.n	80008f6 <HAL_RCC_OscConfig+0x43e>
 8000908:	e640      	b.n	800058c <HAL_RCC_OscConfig+0xd4>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	40021000 	.word	0x40021000
 8000910:	fffeffff 	.word	0xfffeffff
 8000914:	feffffff 	.word	0xfeffffff
 8000918:	ffc27fff 	.word	0xffc27fff

0800091c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800091c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800091e:	4c19      	ldr	r4, [pc, #100]	; (8000984 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000920:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000922:	2210      	movs	r2, #16
 8000924:	0021      	movs	r1, r4
 8000926:	4668      	mov	r0, sp
 8000928:	f000 f9f2 	bl	8000d10 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800092c:	0021      	movs	r1, r4
 800092e:	ad04      	add	r5, sp, #16
 8000930:	2210      	movs	r2, #16
 8000932:	3110      	adds	r1, #16
 8000934:	0028      	movs	r0, r5
 8000936:	f000 f9eb 	bl	8000d10 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800093a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800093c:	4e12      	ldr	r6, [pc, #72]	; (8000988 <HAL_RCC_GetSysClockFreq+0x6c>)
 800093e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000940:	401a      	ands	r2, r3
 8000942:	2a08      	cmp	r2, #8
 8000944:	d004      	beq.n	8000950 <HAL_RCC_GetSysClockFreq+0x34>
 8000946:	2a0c      	cmp	r2, #12
 8000948:	d11a      	bne.n	8000980 <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800094a:	4810      	ldr	r0, [pc, #64]	; (800098c <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800094c:	b008      	add	sp, #32
 800094e:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000950:	200f      	movs	r0, #15
 8000952:	466a      	mov	r2, sp
 8000954:	0c99      	lsrs	r1, r3, #18
 8000956:	4001      	ands	r1, r0
 8000958:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800095a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800095c:	4002      	ands	r2, r0
 800095e:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000960:	22c0      	movs	r2, #192	; 0xc0
 8000962:	2080      	movs	r0, #128	; 0x80
 8000964:	0252      	lsls	r2, r2, #9
 8000966:	4013      	ands	r3, r2
 8000968:	0240      	lsls	r0, r0, #9
 800096a:	4283      	cmp	r3, r0
 800096c:	d101      	bne.n	8000972 <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800096e:	4808      	ldr	r0, [pc, #32]	; (8000990 <HAL_RCC_GetSysClockFreq+0x74>)
 8000970:	e002      	b.n	8000978 <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000972:	4293      	cmp	r3, r2
 8000974:	d1fb      	bne.n	800096e <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000978:	f7ff fbc6 	bl	8000108 <__udivsi3>
 800097c:	4360      	muls	r0, r4
 800097e:	e7e5      	b.n	800094c <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000982:	e7e3      	b.n	800094c <HAL_RCC_GetSysClockFreq+0x30>
 8000984:	08000d4c 	.word	0x08000d4c
 8000988:	40021000 	.word	0x40021000
 800098c:	02dc6c00 	.word	0x02dc6c00
 8000990:	007a1200 	.word	0x007a1200

08000994 <HAL_RCC_ClockConfig>:
{
 8000994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000996:	2201      	movs	r2, #1
 8000998:	4c4f      	ldr	r4, [pc, #316]	; (8000ad8 <HAL_RCC_ClockConfig+0x144>)
{
 800099a:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800099c:	6823      	ldr	r3, [r4, #0]
{
 800099e:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009a0:	4013      	ands	r3, r2
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d31f      	bcc.n	80009e6 <HAL_RCC_ClockConfig+0x52>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009a6:	6832      	ldr	r2, [r6, #0]
 80009a8:	0793      	lsls	r3, r2, #30
 80009aa:	d428      	bmi.n	80009fe <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009ac:	07d3      	lsls	r3, r2, #31
 80009ae:	d42e      	bmi.n	8000a0e <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80009b0:	2301      	movs	r3, #1
 80009b2:	6822      	ldr	r2, [r4, #0]
 80009b4:	9901      	ldr	r1, [sp, #4]
 80009b6:	401a      	ands	r2, r3
 80009b8:	4291      	cmp	r1, r2
 80009ba:	d200      	bcs.n	80009be <HAL_RCC_ClockConfig+0x2a>
 80009bc:	e07e      	b.n	8000abc <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009be:	6833      	ldr	r3, [r6, #0]
 80009c0:	4c46      	ldr	r4, [pc, #280]	; (8000adc <HAL_RCC_ClockConfig+0x148>)
 80009c2:	075b      	lsls	r3, r3, #29
 80009c4:	d500      	bpl.n	80009c8 <HAL_RCC_ClockConfig+0x34>
 80009c6:	e080      	b.n	8000aca <HAL_RCC_ClockConfig+0x136>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80009c8:	f7ff ffa8 	bl	800091c <HAL_RCC_GetSysClockFreq>
 80009cc:	6863      	ldr	r3, [r4, #4]
 80009ce:	4a44      	ldr	r2, [pc, #272]	; (8000ae0 <HAL_RCC_ClockConfig+0x14c>)
 80009d0:	061b      	lsls	r3, r3, #24
 80009d2:	0f1b      	lsrs	r3, r3, #28
 80009d4:	5cd3      	ldrb	r3, [r2, r3]
 80009d6:	40d8      	lsrs	r0, r3
 80009d8:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <HAL_RCC_ClockConfig+0x150>)
 80009da:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff fc1f 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 80009e2:	2000      	movs	r0, #0
 80009e4:	e00a      	b.n	80009fc <HAL_RCC_ClockConfig+0x68>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009e6:	6823      	ldr	r3, [r4, #0]
 80009e8:	9901      	ldr	r1, [sp, #4]
 80009ea:	4393      	bics	r3, r2
 80009ec:	430b      	orrs	r3, r1
 80009ee:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	4013      	ands	r3, r2
 80009f4:	9a01      	ldr	r2, [sp, #4]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d0d5      	beq.n	80009a6 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 80009fa:	2001      	movs	r0, #1
}
 80009fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009fe:	20f0      	movs	r0, #240	; 0xf0
 8000a00:	4936      	ldr	r1, [pc, #216]	; (8000adc <HAL_RCC_ClockConfig+0x148>)
 8000a02:	684b      	ldr	r3, [r1, #4]
 8000a04:	4383      	bics	r3, r0
 8000a06:	68b0      	ldr	r0, [r6, #8]
 8000a08:	4303      	orrs	r3, r0
 8000a0a:	604b      	str	r3, [r1, #4]
 8000a0c:	e7ce      	b.n	80009ac <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a0e:	6872      	ldr	r2, [r6, #4]
 8000a10:	4d32      	ldr	r5, [pc, #200]	; (8000adc <HAL_RCC_ClockConfig+0x148>)
 8000a12:	2a01      	cmp	r2, #1
 8000a14:	d11a      	bne.n	8000a4c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	039b      	lsls	r3, r3, #14
 8000a1a:	d5ee      	bpl.n	80009fa <HAL_RCC_ClockConfig+0x66>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	686b      	ldr	r3, [r5, #4]
 8000a20:	438b      	bics	r3, r1
 8000a22:	4313      	orrs	r3, r2
 8000a24:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000a26:	f7ff fc25 	bl	8000274 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a2a:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000a2c:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d11c      	bne.n	8000a6c <HAL_RCC_ClockConfig+0xd8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a32:	220c      	movs	r2, #12
 8000a34:	686b      	ldr	r3, [r5, #4]
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b04      	cmp	r3, #4
 8000a3a:	d0b9      	beq.n	80009b0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a3c:	f7ff fc1a 	bl	8000274 <HAL_GetTick>
 8000a40:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <HAL_RCC_ClockConfig+0x154>)
 8000a42:	1bc0      	subs	r0, r0, r7
 8000a44:	4298      	cmp	r0, r3
 8000a46:	d9f4      	bls.n	8000a32 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8000a48:	2003      	movs	r0, #3
 8000a4a:	e7d7      	b.n	80009fc <HAL_RCC_ClockConfig+0x68>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a4c:	2a02      	cmp	r2, #2
 8000a4e:	d103      	bne.n	8000a58 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	019b      	lsls	r3, r3, #6
 8000a54:	d4e2      	bmi.n	8000a1c <HAL_RCC_ClockConfig+0x88>
 8000a56:	e7d0      	b.n	80009fa <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000a58:	2a03      	cmp	r2, #3
 8000a5a:	d103      	bne.n	8000a64 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000a5c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a5e:	03db      	lsls	r3, r3, #15
 8000a60:	d4dc      	bmi.n	8000a1c <HAL_RCC_ClockConfig+0x88>
 8000a62:	e7ca      	b.n	80009fa <HAL_RCC_ClockConfig+0x66>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a64:	682b      	ldr	r3, [r5, #0]
 8000a66:	079b      	lsls	r3, r3, #30
 8000a68:	d4d8      	bmi.n	8000a1c <HAL_RCC_ClockConfig+0x88>
 8000a6a:	e7c6      	b.n	80009fa <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d10b      	bne.n	8000a88 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a70:	220c      	movs	r2, #12
 8000a72:	686b      	ldr	r3, [r5, #4]
 8000a74:	4013      	ands	r3, r2
 8000a76:	2b08      	cmp	r3, #8
 8000a78:	d09a      	beq.n	80009b0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a7a:	f7ff fbfb 	bl	8000274 <HAL_GetTick>
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_RCC_ClockConfig+0x154>)
 8000a80:	1bc0      	subs	r0, r0, r7
 8000a82:	4298      	cmp	r0, r3
 8000a84:	d9f4      	bls.n	8000a70 <HAL_RCC_ClockConfig+0xdc>
 8000a86:	e7df      	b.n	8000a48 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d011      	beq.n	8000ab0 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a8c:	220c      	movs	r2, #12
 8000a8e:	686b      	ldr	r3, [r5, #4]
 8000a90:	4213      	tst	r3, r2
 8000a92:	d100      	bne.n	8000a96 <HAL_RCC_ClockConfig+0x102>
 8000a94:	e78c      	b.n	80009b0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a96:	f7ff fbed 	bl	8000274 <HAL_GetTick>
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <HAL_RCC_ClockConfig+0x154>)
 8000a9c:	1bc0      	subs	r0, r0, r7
 8000a9e:	4298      	cmp	r0, r3
 8000aa0:	d9f4      	bls.n	8000a8c <HAL_RCC_ClockConfig+0xf8>
 8000aa2:	e7d1      	b.n	8000a48 <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aa4:	f7ff fbe6 	bl	8000274 <HAL_GetTick>
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_RCC_ClockConfig+0x154>)
 8000aaa:	1bc0      	subs	r0, r0, r7
 8000aac:	4298      	cmp	r0, r3
 8000aae:	d8cb      	bhi.n	8000a48 <HAL_RCC_ClockConfig+0xb4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8000ab0:	220c      	movs	r2, #12
 8000ab2:	686b      	ldr	r3, [r5, #4]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d1f4      	bne.n	8000aa4 <HAL_RCC_ClockConfig+0x110>
 8000aba:	e779      	b.n	80009b0 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000abc:	6822      	ldr	r2, [r4, #0]
 8000abe:	439a      	bics	r2, r3
 8000ac0:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ac2:	6822      	ldr	r2, [r4, #0]
 8000ac4:	421a      	tst	r2, r3
 8000ac6:	d198      	bne.n	80009fa <HAL_RCC_ClockConfig+0x66>
 8000ac8:	e779      	b.n	80009be <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000aca:	6863      	ldr	r3, [r4, #4]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_RCC_ClockConfig+0x158>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	68f2      	ldr	r2, [r6, #12]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	6063      	str	r3, [r4, #4]
 8000ad6:	e777      	b.n	80009c8 <HAL_RCC_ClockConfig+0x34>
 8000ad8:	40022000 	.word	0x40022000
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	08000d6c 	.word	0x08000d6c
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	00001388 	.word	0x00001388
 8000aec:	fffff8ff 	.word	0xfffff8ff

08000af0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000af0:	4b01      	ldr	r3, [pc, #4]	; (8000af8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000af2:	6818      	ldr	r0, [r3, #0]
}
 8000af4:	4770      	bx	lr
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	20000000 	.word	0x20000000

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afe:	2410      	movs	r4, #16
{
 8000b00:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	2234      	movs	r2, #52	; 0x34
 8000b04:	2100      	movs	r1, #0
 8000b06:	a805      	add	r0, sp, #20
 8000b08:	f000 f90b 	bl	8000d22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	0022      	movs	r2, r4
 8000b0e:	2100      	movs	r1, #0
 8000b10:	a801      	add	r0, sp, #4
 8000b12:	f000 f906 	bl	8000d22 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b16:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b1a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b20:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b22:	f7ff fcc9 	bl	80004b8 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b26:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b28:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b2a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b2e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b30:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b32:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b34:	f7ff ff2e 	bl	8000994 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000b38:	b012      	add	sp, #72	; 0x48
 8000b3a:	bd10      	pop	{r4, pc}

08000b3c <main>:
{
 8000b3c:	b510      	push	{r4, lr}
 8000b3e:	b086      	sub	sp, #24
  HAL_Init();
 8000b40:	f7ff fb80 	bl	8000244 <HAL_Init>
  SystemClock_Config();
 8000b44:	f7ff ffda 	bl	8000afc <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	2214      	movs	r2, #20
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	a801      	add	r0, sp, #4
 8000b4e:	f000 f8e8 	bl	8000d22 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2080      	movs	r0, #128	; 0x80

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000b54:	24c0      	movs	r4, #192	; 0xc0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <main+0x90>)
 8000b58:	02c0      	lsls	r0, r0, #11
 8000b5a:	6951      	ldr	r1, [r2, #20]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000b5c:	01e4      	lsls	r4, r4, #7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4301      	orrs	r1, r0
 8000b60:	6151      	str	r1, [r2, #20]
 8000b62:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000b64:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4003      	ands	r3, r0
 8000b68:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <main+0x94>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000b70:	f7ff fc9c 	bl	80004ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000b7a:	9401      	str	r4, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	a901      	add	r1, sp, #4
 8000b7e:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <main+0x94>)
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000b80:	2480      	movs	r4, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f7ff fbd5 	bl	8000334 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000b8a:	01a4      	lsls	r4, r4, #6
 8000b8c:	0021      	movs	r1, r4
 8000b8e:	2201      	movs	r2, #1
 8000b90:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <main+0x94>)
 8000b92:	f7ff fc8b 	bl	80004ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000b96:	2180      	movs	r1, #128	; 0x80
 8000b98:	2200      	movs	r2, #0
 8000b9a:	01c9      	lsls	r1, r1, #7
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <main+0x94>)
 8000b9e:	f7ff fc85 	bl	80004ac <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000ba2:	20fa      	movs	r0, #250	; 0xfa
 8000ba4:	0040      	lsls	r0, r0, #1
 8000ba6:	f7ff fb6b 	bl	8000280 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000baa:	0021      	movs	r1, r4
 8000bac:	2200      	movs	r2, #0
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <main+0x94>)
 8000bb0:	f7ff fc7c 	bl	80004ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	01c9      	lsls	r1, r1, #7
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <main+0x94>)
 8000bbc:	f7ff fc76 	bl	80004ac <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000bc0:	20fa      	movs	r0, #250	; 0xfa
 8000bc2:	0040      	lsls	r0, r0, #1
 8000bc4:	f7ff fb5c 	bl	8000280 <HAL_Delay>
 8000bc8:	e7e0      	b.n	8000b8c <main+0x50>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	48000400 	.word	0x48000400

08000bd4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_MspInit+0x2c>)
{
 8000bd8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	6999      	ldr	r1, [r3, #24]
 8000bdc:	4301      	orrs	r1, r0
 8000bde:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4002      	ands	r2, r0
 8000be8:	9200      	str	r2, [sp, #0]
 8000bea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bec:	69da      	ldr	r2, [r3, #28]
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	61da      	str	r2, [r3, #28]
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	400b      	ands	r3, r1
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	b002      	add	sp, #8
 8000bfc:	4770      	bx	lr
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40021000 	.word	0x40021000

08000c04 <NMI_Handler>:
 8000c04:	4770      	bx	lr

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler>

08000c08 <SVC_Handler>:
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0e:	f7ff fb29 	bl	8000264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c12:	bd10      	pop	{r4, pc}

08000c14 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000c14:	2101      	movs	r1, #1
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000c18:	4811      	ldr	r0, [pc, #68]	; (8000c60 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	4002      	ands	r2, r0
 8000c24:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	480e      	ldr	r0, [pc, #56]	; (8000c64 <SystemInit+0x50>)
 8000c2a:	4002      	ands	r2, r0
 8000c2c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <SystemInit+0x54>)
 8000c32:	4002      	ands	r2, r0
 8000c34:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <SystemInit+0x58>)
 8000c3a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000c3c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000c3e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c42:	4382      	bics	r2, r0
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8000c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c48:	4809      	ldr	r0, [pc, #36]	; (8000c70 <SystemInit+0x5c>)
 8000c4a:	4002      	ands	r2, r0
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c50:	438a      	bics	r2, r1
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]

}
 8000c58:	4770      	bx	lr
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	08ffb80c 	.word	0x08ffb80c
 8000c64:	fef6ffff 	.word	0xfef6ffff
 8000c68:	fffbffff 	.word	0xfffbffff
 8000c6c:	ffc0ffff 	.word	0xffc0ffff
 8000c70:	fffcfe2c 	.word	0xfffcfe2c

08000c74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0b      	ldr	r4, [pc, #44]	; (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c9e:	f7ff ffb9 	bl	8000c14 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ca2:	f000 f811 	bl	8000cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca6:	f7ff ff49 	bl	8000b3c <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
  ldr   r0, =_estack
 8000cac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000cb8:	08000d84 	.word	0x08000d84
  ldr r2, =_sbss
 8000cbc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000cc0:	20000024 	.word	0x20000024

08000cc4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC1_COMP_IRQHandler>
	...

08000cc8 <__libc_init_array>:
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	2600      	movs	r6, #0
 8000ccc:	4d0c      	ldr	r5, [pc, #48]	; (8000d00 <__libc_init_array+0x38>)
 8000cce:	4c0d      	ldr	r4, [pc, #52]	; (8000d04 <__libc_init_array+0x3c>)
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	10a4      	asrs	r4, r4, #2
 8000cd4:	42a6      	cmp	r6, r4
 8000cd6:	d109      	bne.n	8000cec <__libc_init_array+0x24>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	f000 f82b 	bl	8000d34 <_init>
 8000cde:	4d0a      	ldr	r5, [pc, #40]	; (8000d08 <__libc_init_array+0x40>)
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	; (8000d0c <__libc_init_array+0x44>)
 8000ce2:	1b64      	subs	r4, r4, r5
 8000ce4:	10a4      	asrs	r4, r4, #2
 8000ce6:	42a6      	cmp	r6, r4
 8000ce8:	d105      	bne.n	8000cf6 <__libc_init_array+0x2e>
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
 8000cec:	00b3      	lsls	r3, r6, #2
 8000cee:	58eb      	ldr	r3, [r5, r3]
 8000cf0:	4798      	blx	r3
 8000cf2:	3601      	adds	r6, #1
 8000cf4:	e7ee      	b.n	8000cd4 <__libc_init_array+0xc>
 8000cf6:	00b3      	lsls	r3, r6, #2
 8000cf8:	58eb      	ldr	r3, [r5, r3]
 8000cfa:	4798      	blx	r3
 8000cfc:	3601      	adds	r6, #1
 8000cfe:	e7f2      	b.n	8000ce6 <__libc_init_array+0x1e>
 8000d00:	08000d7c 	.word	0x08000d7c
 8000d04:	08000d7c 	.word	0x08000d7c
 8000d08:	08000d7c 	.word	0x08000d7c
 8000d0c:	08000d80 	.word	0x08000d80

08000d10 <memcpy>:
 8000d10:	2300      	movs	r3, #0
 8000d12:	b510      	push	{r4, lr}
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d100      	bne.n	8000d1a <memcpy+0xa>
 8000d18:	bd10      	pop	{r4, pc}
 8000d1a:	5ccc      	ldrb	r4, [r1, r3]
 8000d1c:	54c4      	strb	r4, [r0, r3]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	e7f8      	b.n	8000d14 <memcpy+0x4>

08000d22 <memset>:
 8000d22:	0003      	movs	r3, r0
 8000d24:	1882      	adds	r2, r0, r2
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d100      	bne.n	8000d2c <memset+0xa>
 8000d2a:	4770      	bx	lr
 8000d2c:	7019      	strb	r1, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	e7f9      	b.n	8000d26 <memset+0x4>
	...

08000d34 <_init>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3a:	bc08      	pop	{r3}
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	4770      	bx	lr

08000d40 <_fini>:
 8000d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d46:	bc08      	pop	{r3}
 8000d48:	469e      	mov	lr, r3
 8000d4a:	4770      	bx	lr
